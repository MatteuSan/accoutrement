// Sass Utilities
// ==============


// Register Function
// -----------------
// sass-lint:disable variable-name-format
@include describe('Register Function [mixin]') {
  @include it('Adds to the list of registered functions') {
    // reset the global, for a clean testing environment
    $old: $_ACCOUTREMENT_FUNCTIONS;
    $_ACCOUTREMENT_FUNCTIONS: () !global;

    // register two functions
    @include _a_register-function('_a_get-function');
    @include _a_register-function('_a_str-replace');

    // legacy Sass app-functions map
    $expect: (
      '_a_get-function': '_a_get-function',
      '_a_str-replace': '_a_str-replace',
    );

    // first-class Sass app-functions map
    @if (function-exists('get-function')) {
      $expect: (
        '_a_get-function': get-function('_a_get-function'),
        '_a_str-replace': get-function('_a_str-replace'),
      );
    }

    // apply to app
    $expect: ($_ACCOUTREMENT_APP: $expect);

    @include assert-equal(
      $_ACCOUTREMENT_FUNCTIONS,
      $expect
    );
    $_ACCOUTREMENT_FUNCTIONS: $old !global;
  }
}


// Get Function
// ------------
@include describe('Get Function [function]') {
  $test: _a_get-function('times');

  @include it('Returns a function or function-name') {
    $expect: 'times';

    @if (function-exists('get-function')) {
      $expect: get-function('times');
    }

    @include assert-equal(
      $test,
      $expect
    );
  }

  @include it('Returned function or name is callable') {
    @include assert-equal(
      call($test,3, 2),
      6
    );
  }

  @if function-exists('get-function') {
    @include it('Functions are returned without change') {
      @include assert-equal(
        _a_get-function(get-function('times')),
        get-function('times')
      );
    }
  }
}


// Accoutrement Get
// ----------------
@include describe('Accoutrement Get [function]') {
  $haystack: (
    'slow': 3s,
    'delay': 0.5s,
    'key': 'value',
    '*': 'times',
    'two': 2,
  );

  @include it('Returns the value of a simple map key') {
    @include assert-equal(
      _a_get($haystack, 'slow'),
      3s
    );
  }

  @include it('Replaces the value of any #alias tag') {
    $needle: ('delay': 'is #delay', '#key': 3) '#key';
    $expect: ('delay': 'is 0.5s', 'value': 3) 'value';
    @include assert-equal(
      _a_get($haystack, $needle),
      $expect
    );
  }

  @include it('Handles todo-maps at the end of a list') {
    @include assert-equal(
      _a_get($haystack, '#slow' ('times': 2)),
      6
    );
  }

  @include it('Handles explicit todo-maps') {
    $needle: (
      'value': '#slow or #whatever',
      '_a_str-replace': 'or' 'with',
    );
    @include assert-equal(
      _a_get($haystack, $needle),
      '3s with #whatever'
    );
  }

  @include it('Allows #alias tags in todo map') {
    $needle: (
      'value': '#slow',
      '#*': '#two',
    );
    @include assert-equal(
      _a_get($haystack, $needle),
      6s
    );
  }

  @include it('Handles common calc use-case') {
    @include assert-equal(
      _a_get($haystack, calc(#slow + #delay)),
      calc(3s + 0.5s)
    );
  }
}


// Replace Alias
// -------------
@include describe('Parse Alias [function]') {
  $haystack: (
    'one': 'original value',
    'two': '#one',
    'three': '#two',
    'four': 'and a new value',
  );

  @include it('Replaces a hashtag key with the associated value') {
    @include assert-equal(
      _a_parse-alias('#one', $haystack),
      'original value'
    );
  }

  @include it('Handles basic hash recursion') {
    @include assert-equal(
      _a_parse-alias('#three', $haystack),
      'original value'
    );
  }

  @include it('Handles multiple values with basic recursion') {
    @include assert-equal(
      _a_parse-alias('#three #four', $haystack),
      'original value and a new value'
    );
  }

  @include it('Handles list values') {
    @include assert-equal(
      _a_parse-alias('#three' 7 '#four', $haystack),
      ('original value' 7 'and a new value')
    );
  }

  @include it('Handles calc use-case') {
    @include assert-equal(
      _a_parse-alias('#three' 7 '#four', $haystack),
      ('original value' 7 'and a new value')
    );
  }

  @include it('Maintains list style') {
    $list: ['#three #four#three', 7, '#four'];
    $expect: [
      'original value and a new valueoriginal value',
      7,
      'and a new value'
    ];
    @include assert-equal(
      _a_parse-alias($list, $haystack),
      $expect
    );
  }

  @include it('Handles map values') {
    $map: (
      '#one' '#two': '#two' 7 '#four',
      'and': '#one#one',
    );
    $expect: (
      'original value' 'original value': 'original value' 7 'and a new value',
      'and': 'original valueoriginal value',
    );
    @include assert-equal(
      _a_parse-alias($map, $haystack),
      $expect
    );
  }
}


// Get Alias Name
// --------------
@include describe('Get Alias Names [function]') {
  @include it('Returns a #name alias from a string (space-delimited)') {
    @include assert-equal(
      _a_get-alias-names('Returns a #name alias from a string'),
      join((), 'name')
    );
  }

  @include it('Ends alias names on "("') {
    @include assert-equal(
      _a_get-alias-names('what)#this-name(some thing'),
      join((), 'this-name')
    );
  }

  @include it('Ends alias names on ")"') {
    @include assert-equal(
      _a_get-alias-names('what)#this_name)some thing'),
      join((), 'this_name')
    );
  }

  @include it('Ends alias names on "["') {
    @include assert-equal(
      _a_get-alias-names('what)#this-name[some thing'),
      join((), 'this-name')
    );
  }

  @include it('Ends alias names on "]"') {
    @include assert-equal(
      _a_get-alias-names('what)#this_name]some thing'),
      join((), 'this_name')
    );
  }

  @include it('Ends alias names on "\\"') {
    @include assert-equal(
      _a_get-alias-names('what)#this_name\\some thing'),
      join((), 'this_name')
    );
  }

  @include it('Ends alias names on "/"') {
    @include assert-equal(
      _a_get-alias-names('what)#this_name/some thing'),
      join((), 'this_name')
    );
  }

  @include it('Ends alias, and returns multiple on "#"') {
    @include assert-equal(
      _a_get-alias-names('what)#this_name#some thing'),
      ('this_name' 'some')
    );
  }

  @include it('Only returns each alias once') {
    @include assert-equal(
      _a_get-alias-names('what)#this_name#some #this_name/thing'),
      ('this_name' 'some')
    );
  }

  @include it('Handles a lonely hashtag') {
    @include assert-equal(
      _a_get-alias-names('#thing'),
      join((), 'thing')
    );
  }
}


// Remove Nth
// ----------
@include describe('_a_remove-nth [function]') {
  @include it('Returns a list with item removed') {
    @include assert-equal(
      _a_remove-nth('one' 'two' 3, 2),
      'one' 3
    );
  }

  @include it('Returns a list with negative-indexed item removed') {
    @include assert-equal(
      _a_remove-nth('one' 'two' 3, -1),
      'one' 'two'
    );
  }
}


// List From Template
// ------------------
@include describe('_a_list-template [function]') {
  $space: 'one' 'two';
  $comma: ('one', 'two');
  $b-space: ['one' 'two'];
  $b-comma: ['one', 'two'];

  @include it('Returns an empty list') {
    @include assert-equal(
      type-of(_a_list-template($space)),
      'list',
      'should be a list'
    );
    @include assert-equal(
      length(_a_list-template($b-comma)),
      0,
      'should be empty'
    );
  }

  @include it('Keeps the original space list-separator') {
    @include assert-equal(
      list-separator(_a_list-template($space)),
      'space'
    );

    @include assert-equal(
      list-separator(_a_list-template($b-space)),
      'space'
    );
  }

  @include it('Keeps the original comma list-separator') {
    @include assert-equal(
      list-separator(_a_list-template($b-comma)),
      'comma'
    );

    @include assert-equal(
      list-separator(_a_list-template($comma)),
      'comma'
    );
  }

  @include it('Keeps the original brackets or lack-of') {
    @include assert-false(
      is-bracketed(_a_list-template($comma))
    );

    @include assert-true(
      is-bracketed(_a_list-template($b-space))
    );
  }
}
