@use '../../node_modules/sass-true/sass/true' as *;
@use '../../sass/ratio/tokens';
@use '../../sass/utils/map';
@use 'sass:math';

@include test-module('ratio/tokens') {
  tokens.$ratios: (
    'new': '#_octave',
  );

  // Ratio [function]
  // ----------------
  @include describe('Ratio [function]') {
    @include it('Returns a named ratio with _ prefix') {
      @include assert-equal(
        tokens.ratio('_fifth'),
        math.div(3, 2)
      );
    }

    @include it('Returns a recursive ratio') {
      @include assert-equal(
        tokens.ratio('new'),
        tokens.ratio('_octave')
      );
    }

    @include it('Accepts $do adjustments') {
      @include assert-equal(
        tokens.ratio('new', ('plus': 1)),
        tokens.ratio('_octave') + 1
      );
    }

    @include it('Accepts custom source') {
      $custom: (
        'special': calc(16 / 9),
        'custom-source': '#special',
      );

      @include assert-equal(
        tokens.ratio('custom-source', $source: $custom),
        calc(16 / 9)
      );
    }
  }


  @include describe('Add Ratios [mixin]') {
    $old: tokens.$ratios;
    $new1: (
      'test': calc(1 / 3),
      'other': calc(1 / 2),
    );
    $new2: (
      'test': calc(16 / 9)
    );
    @include tokens.add-ratios($new1, $new2);
    @include it('Adds maps to the $ratios global') {
      @include assert-equal(
        tokens.$ratios,
        map.multi-merge($old, $new1, $new2)
      );
    }
    tokens.$ratios: $old;
  }

} // end module
