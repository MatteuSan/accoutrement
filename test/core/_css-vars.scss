// CSS Variables
// =============
@include test-module('Core CSS Variables') {


$test: (
  '_brand': hsl(120, 50%, 50%),
  'text': '#_brand' ('shade': 50%),
  'border': '#text',
  'private-alias': '#_brand',
  'multi': '#border',
);


// Var [function]
// --------------
@include describe('Var [function]') {
  @include it('Returns a custom-property formatted token name') {
    @include assert-equal(
      _a_var-name('test'),
      --test
    );
  }

  @include it('Prepends an optional prefix') {
    @include assert-equal(
      _a_var-name('test', 'color-'),
      --color-test
    );
  }
}


// CSS Tokens [mixin]
// ------------------
@include describe('CSS Tokens [mixin]') {
  @include it('Converts a map into css custom properties') {
    @include assert {
      @include output {
        @include css-tokens($test);
      }

      @include expect {
        --text: #{get-token($test, 'text')};
        --border: var(--text, #{get-token($test, 'border')});
        --private-alias: #{get-token($test, '_brand')};
        --multi: var(--border, #{get-token($test, 'border')});
      }
    }
  }

  @include it('Optionally adds a prefix') {
    @include assert {
      @include output {
        @include css-tokens($test, 'test-');
      }

      @include expect {
        --test-text: #{get-token($test, 'text')};
        --test-border: var(--test-text, #{get-token($test, 'border')});
        --test-private-alias: #{get-token($test, '_brand')};
        --test-multi: var(--test-border, #{get-token($test, 'border')});
      }
    }
  }
}


// Var Token [function]
// --------------------
@include describe('Var Token [function]') {
  @include it('Returns a variable with generated fallback') {
    @include assert-equal(
      var-token($test, 'text'),
      var(--text, get-token($test, 'text'))
    );
  }

  @include it('Optionally uses no fallback') {
    @include assert-equal(
      var-token($test, 'text', false),
      var(--text)
    );
  }

  @include it('Optionally uses var fallback') {
    @include assert-equal(
      var-token($test, 'text', 'border'),
      var(--text, var(--border, get-token($test, 'border')))
    );
  }

  @include it('Optionally uses custom fallback') {
    @include assert-equal(
      var-token($test, 'text', red),
      var(--text, red)
    );
  }

  @include it('Optionally adds a prefix') {
    @include assert-equal(
      var-token($test, 'text', 'border', 'color-'),
      var(--color-text, var(--color-border, get-token($test, 'border')))
    );

    @include assert-equal(
      var-token($test, 'text', red, 'color-'),
      var(--color-text, red)
    );
  }

  @include it('Accepts private tokens') {
    @include assert-equal(
      var-token($test, '_brand'),
      var(--_brand, #40bf40)
    );
  }
}


// CSS Token [mixin]
// -----------------
@include describe('CSS Token [mixin]') {
  @include it('Establishes a CSS-Variable for any token') {
    @include assert {
      @include output {
        @include css-token($test, 'text');
      }

      @include expect {
        --text: #{get-token($test, 'text')};
      }
    }
  }

  @include it('Provides a reference for alias tokens') {
    @include assert {
      @include output {
        @include css-token($test, 'border');
      }

      @include expect {
        --border: var(--text, #{get-token($test, 'border')});
      }
    }
  }

  @include it('Establishes a CSS-Variable alias for any token') {
    @include assert {
      @include output {
        @include css-token($test, 'text', 'alias');
      }

      @include expect {
        --alias: var(--text, #{get-token($test, 'text')});
      }
    }
  }

  @include it('Accepts explicit fallback values') {
    @include assert {
      @include output {
        @include css-token($test, 'text', 'alias', red);
      }

      @include expect {
        --alias: var(--text, red);
      }
    }
  }

  @include it('Handles prefixing') {
    @include assert {
      @include output {
        @include css-token($test, 'text', 'alias', red, 'color-');
      }

      @include expect {
        --color-alias: var(--color-text, red);
      }
    }
  }
}


} // end module
