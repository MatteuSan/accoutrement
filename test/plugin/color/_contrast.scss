// Contrast Tests
// ==============
@include test-module('Color: Contrast') {


// Luminance [function]
// --------------------
@include describe('Luminance [function]') {
  @include it('Returns proper luminance of a color') {
    @include assert-equal(
      luminance(#fff),
      1,
      'white',
      $inspect: true
    );

    @include assert-equal(
      luminance(#000),
      0,
      'black',
      $inspect: true
    );

    @include assert-equal(
      luminance(#ff0),
      0.9278,
      'yellow',
      $inspect: true
    );

    @include assert-equal(
      luminance(#0f0),
      0.7152,
      'green',
      $inspect: true
    );

    @include assert-equal(
      luminance(#3492a1),
      0.23861,
      'blue',
      $inspect: true
    );
  }
}


// Contrast Ratio [function]
// -------------------------
@include describe('Contrast Ratio [function]') {
  @include it('Returns contrast ratio between two colors') {
    @include assert-equal(
      contrast-ratio(#fff, #fff),
      1
    );

    @include assert-equal(
      contrast-ratio(#000, #fff),
      21
    );
  }

  @include it('Returns contrast ratio if test is met') {
    @include assert-equal(
      contrast-ratio(#333, #999, 'aa-large'),
      4.43472,
      $inspect: true
    );
  }

  @include it('Returns false if test is not met') {
    @include assert-equal(
      contrast-ratio(#333, #999, 'AAA'),
      false
    );
  }
}


// Default Contrast [function]
// ---------------------------
@include describe('Default Contrast [function]') {
  @include it('Returns the user default values when defined') {
    @include assert-equal(
      _a_default-contrast(),
      (
        'light': 'contrast-light',
        'dark': 'contrast-dark',
      )
    );
  }

  @include it('Returns the user light value') {
    @include assert-equal(
      _a_default-contrast('light'),
      'contrast-light'
    );
  }

  @include it('Returns the user dark value') {
    @include assert-equal(
      _a_default-contrast('dark'),
      'contrast-dark'
    );
  }

  @include it('Returns the user dark value') {
    @include assert-equal(
      _a_default-contrast('dark'),
      'contrast-dark'
    );
  }

  $original-colors: $colors;
  $colors: () !global;

  @include it('Returns the factory values by default') {
    @include assert-equal(
      _a_default-contrast(),
      (
        'light': '_contrast-light',
        'dark': '_contrast-dark',
      )
    );
  }

  $colors: $original-colors !global;
}


// Get Contrast [function]
// -----------------------
@include describe('Get Contrast [function]') {
  @include it('Dark on light') {
    @include assert-equal(
      _a_get-contrast('map', #eee),
      (
        'name': 'contrast-dark',
        'color': color('contrast-dark'),
      ),
      'Returns a dark color to contrast a light one.'
    );
  }

  @include it('Light on dark') {
    @include assert-equal(
      _a_get-contrast('map', 'dark'),
      (
        'name': 'contrast-light',
        'color': color('contrast-light'),
      ),
      'Returns a light color to contrast a dark one.'
    );
  }

  $original-colors: $colors;
  $colors: () !global;

  @include it('Default light fallback') {
    @include assert-equal(
      _a_get-contrast('color', #000),
      #fff,
      'Returns white for light contrast when none is given.'
    );
  }

  @include it('Default dark fallback') {
    @include assert-equal(
      _a_get-contrast('color', #fff),
      #000,
      'Returns black for dark contrast when none is given.'
    );
  }

  $colors: $original-colors !global;

  @include it('Multiple contrast options') {
    @include assert-equal(
      _a_get-contrast('name', 'primary', #ff0, #fcc, #0f0, 'light', #003),
      #003,
      'Returns the best option from the list.'
    );
  }

  @include it('Return name of a token') {
    @include assert-equal(
      _a_get-contrast('name', 'primary'),
      'contrast-dark',
      'Returns the name of a selected token.'
    );
  }

  @include it('Picks a smart default when only one option is given') {
    @include assert-equal(
      _a_get-contrast('name', #eee, #ff0),
      'contrast-dark'
    );
  }
}


// Contrast [function]
// -------------------
@include describe('Contrast [function]') {
  @include it('Dark on light') {
    @include assert-equal(
      contrast(#eee),
      color('contrast-dark'),
      'Returns a dark color to contrast a light one.'
    );
  }

  @include it('Light on dark') {
    @include assert-equal(
      contrast('dark'),
      color('contrast-light'),
      'Returns a light color to contrast a dark one.'
    );
  }

  $original-colors: $colors;
  $colors: () !global;

  @include it('Default light fallback') {
    @include assert-equal(
      contrast(#000),
      #fff,
      'Returns white for light contrast when none is given.'
    );
  }

  @include it('Default dark fallback') {
    @include assert-equal(
      contrast(#fff),
      #000,
      'Returns black for dark contrast when none is given.'
    );
  }

  $colors: $original-colors !global;

  @include it('Multiple contrast options') {
    @include assert-equal(
      contrast('primary', #ff0, #fcc, #0f0, 'light', #003),
      #003,
      'Returns the best option from the list.'
    );
  }

  @include it('Picks a smart default when given a single option') {
    @include assert-equal(
      contrast('primary', #ff0),
      color('contrast-dark')
    );
  }
}


// Contrasted [mixin]
// ------------------
@include describe('contrasted [mixin]') {
  @include it('Dark on light') {
    @include assert('Use a dark color on a light background.') {
      @include output {
        @include contrasted(#eee);
      }

      @include expect {
        background-color: #eee;
        color: color('contrast-dark');
      }
    }
  }

  @include it('Light on dark') {
    @include assert('Use a light color on a dark background.') {
      @include output {
        @include contrasted('dark');
      }

      @include expect {
        background-color: color('dark');
        color: color('contrast-light');
      }
    }
  }
}

} // end module
