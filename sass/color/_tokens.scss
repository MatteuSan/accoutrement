/// # Accessing Colors
/// @group color-tokens

@use 'config';
@use '../utils/map';
@use '../tokens';
@use 'sass:map' as sass-map;
@use 'sass:meta';

$_config: (
  '_contrast-light': config.$contrast-light,
  '_contrast-dark': config.$contrast-dark,
);

// Add Colors
// ----------
/// Merge individual color maps into the global `$colors` variable,
/// in case you want to define colors in smaller groups
/// such as `brand-colors`, `link-colors`, etc
/// before merging them into a single global color-palette.
/// This can be useful for internal organization,
/// documentation with [SassDoc][SassDoc],
/// or integration with our pattern-library generator:
/// [Herman][Herman].
///
/// [SassDoc]: http://sassdoc.com/
/// [Herman]: https://www.oddbird.net/herman/
///
/// @group color-api
/// @example scss
///   $brand-colors: (
///     'brand-dark': #222,
///     'brand-pink': hsl(330, 85%, 62%),
///   );
///
///   $text-colors: (
///     'text': '#brand-dark',
///     'link': '#brand-pink',
///   );
///
///   @include add-colors($brand-colors, $text-colors);
///
/// @param {map...} $maps -
///   Pass any number of maps to be merged.
/// @output -
///   An updated global `$colors` variable,
///   with new maps merged in.
@mixin add-colors (
  $maps...
) {
  config.$colors: map.multi-merge(config.$colors, $maps...);
}


// Color
// -----
/// The primary function for
/// accessing colors in your palette,
/// or making adjustments on the fly.
///
/// This is more than a wrapper for `map-get($colors, $x)`.
/// It also handles internal color-references, recursion,
/// and functional color-adjustments.
/// It has access to the global `$colors` map by default,
/// but you can also pass in arbitrary color-palette maps as well.
///
/// @since 2.0.0 -
/// - BREAKING: Provides access to color-contrast defaults,
///   if they haven't been re-set by the user
/// @since 1.0.0 -
/// - BREAKING: Renamed `$palette` arg to `$source`
/// - BREAKING: Accepts `$do` argument
///   between `$color` and `$source`
///
/// @group color-tokens
/// @example scss
///   $colors: (
///     'background': #eee,
///     'text': #222,
///   );
///
///   html {
///     background: color('background');
///     color: color('text');
///   }
///
/// @param {string | list} $color -
///   The name of a color in your palette,
///   or a color description in the
///   [map configuration format](color-api.html#color-configuration).
/// @param {map | null} $do [null] -
///   A map of function/ratio adjustments to run on the returned value
/// @param {map} $source [$colors] -
///   Optional map containing the source color-palette.
///   Defaults to the global `$colors` map.
///
/// @return {color} -
///   A calculated css-ready color,
///   based on your global color palette and adjustments.
@function color(
  $color,
  $do: null,
  $source: config.$colors
) {
  $source: sass-map.merge($_config, $source);

  @if (meta.type-of($color) == 'color') {
    // apply adjustments
    @if $do {
      @return tokens.compile($source, $color $do);
    }

    // return color without changes
    @return $color;
  }

  @return tokens.get($source, $color, $do);
}
