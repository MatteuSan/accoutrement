/// ### Using WebFonts
///
/// Once you've configured your webfont data into a map,
/// these tools will help you access the data in various ways:
/// from creating `@font-face` imports,
/// to calling font-families by any given alias.
///
/// @group type-fonts


// Font [function]
// ---------------
/// Retrieve and normalize font data from the `$fonts` map
///
/// @since 1.0.0 -
/// NEW: Use `font` to access a normalized map of font data
/// for any key in your global `$fonts` map
///
/// @group type-fonts
/// @param {any} $font -
///   A key for accessing the desired font in `$fonts`
/// @return {map} -
///   A parsed and normalized map of font-data
@function font(
  $font
) {
  $data: get-token($fonts, $font);
  $normal: _a_normalize-font($data, $font);
  @return $normal;
}


// Font-URL [function]
// -------------------
/// This is a wrapper for the CSS `url()` function,
/// which simply prepends the global `$font-path` when appropriate.
///
/// @since type-4.0.0 -
/// Supports Base64 data URI's, without prepending font-path.
///
/// @group type-fonts
/// @example scss
///   $font-path: '../fonts/';
///   $src: font-url('sans/my-sans-font.woff2');
///   /* #{$src} */
///
/// @param {string} $path -
///   A path relative to the fonts directory.
/// @return {string} -
///   The full path to a font file, in CSS `url('my/path')` format.
@function font-url(
  $path
) {
  @if not str-index($path, 'data:') {
    $path: $font-path + $path;
  }

  @return url(quote($path)); // stylelint-disable-line function-url-quotes
}


// Font Family [function]
// ----------------------
/// Access a font-family from your `$fonts` map,
/// with name and font-stack.
///
/// @since type-4.0.0 -
/// Provides the correct name for fonts when an alias is given.
///
/// @group type-fonts
/// @example scss
///   $fonts: (
///     'sans': (
///       'name': 'FranklinGothic',
///       'stack': (Helvetica, Arial, sans-serif),
///     ),
///   );
///
///   html {
///     font-family: font-family('sans');
///   }
///
/// @param {string} $key -
///   The key-name of a font in your `$fonts` map.
/// @return {String} -
///   The full font-stack for the given font,
///   ready for output with the `font-family` property.
@function font-family(
  $key
) {
  $font: font($key);
  @return map-get($font, 'stack');
}


// Font Family [mixin]
// -------------------
/// Output a font-stack to font-family based on your `$fonts` configuration.
///
/// @group type-fonts
/// @example scss
///   $fonts: (
///     'FranklinGothic': (
///       'stack': (Helvetica, Arial, sans-serif),
///     ),
///     'sans': '#FranklinGothic',
///   );
///
///   html {
///     @include font-family('sans');
///   }
///
/// @param {string} $key -
///   The key-name of a font in your `$fonts` map.
@mixin font-family(
  $key
) {
  font-family: font-family($key);
}


// Font Face [mixin]
// -----------------
/// Import any local webfont defined in your `$fonts` configuration
/// (variants without a path will not be imported).
///
/// @since type-4.0.0 -
/// No longer accepts the `$formats` parameter
///
/// @group type-fonts
/// @example scss
///   $fonts: (
///     'body-font': (
///       'name': 'Source Sans Pro',
///       'formats': 'woff2' 'woff' 'eot',
///       'normal': 'sans/sourcesanspro-regular-webfont',
///       'italic': 'sans/sourcesanspro-italic-webfont',
///       'bold': 'sans/sourcesanspro-bold-webfont',
///     ),
///   );
///   @include font-face('body-font');
///
/// @param {string} $key -
///   The key-name of a font in your `$fonts` map
/// @output `@font-face` import blocks for any defined font-variants.
@mixin font-face(
  $key
) {
  $font: font($key);
  $variants: _a_font-get-variants($font);
  $name: map-get($font, 'name');

  @if (length($variants) > 0) {
    $unicode: map-get($font, 'unicode-range');

    @each $variant, $data in $variants {
      $weight: nth($variant, 1);
      $style: nth($variant, 2);
      @include _a_import-font-face($name, $weight, $style, $data, $unicode);
    }
  }
}


// Import WebFonts [mixin]
// -----------------------
/// Find all the fonts that include data for imports,
/// and generate `@font-face` blocks for each individual font and variant.
///
/// @since 1.0.0 -
/// No longer accepts the `$fonts` parameter,
/// variant data should be normalized in advance
/// @since type-4.0.0 -
/// No longer accepts the `$formats` parameter
///
/// @group type-fonts
/// @example scss
///   $fonts: (
///     'body-font': (
///       'name': 'Source Sans Pro',
///       'formats': 'woff2' 'woff' 'eot',
///       'normal': 'sans/sourcesanspro-regular-webfont',
///       'italic': 'sans/sourcesanspro-italic-webfont',
///       'bold': 'sans/sourcesanspro-bold-webfont',
///     ),
///     // alias keys, and fonts without path data will be ignoredâ€¦
///     'alias': '#body-font',
///     'google-font': (
///       'source': 'http://fonts.google.com/',
///     ),
///   );
///   @include import-webfonts;
///
/// @output Any number of `@font-face` blocks.
@mixin import-webfonts {
  @each $key, $font in $fonts {
    @if (type-of($font) == 'map') {
      @include font-face($key);
    }
  }
}
