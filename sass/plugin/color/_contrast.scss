/// # Managing Contrast & Accessibility
/// @group color-contrast


// WCAG Contrast
// -------------
/// These named contrast-ratios are defined by the [WCAG][WCAG].
///
/// [WCAG]: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast
///
/// @access private
$WCAG-CONTRAST: (
  'AA-large': 3,
  'AA': 4.5,
  'AAA': 7,
);


// Contrast
// --------
/// For any color, select the best contrast among a set of options.
/// For best results, pass in a combination of light and dark colors
/// to contrast against – 
/// or define default `contrast-light` and `contrast-dark` values
/// (with or without a private `_` prefix)
/// in your global `$colors` map.
///
/// @group color-contrast
/// @example scss - default options
///   $background: #333;
///   html {
///     background: $background;
///     color: contrast($background);
///   }
/// @example scss - explicit options
///   $background: #333;
///   html {
///     background: $background;
///     color: contrast(
///       $background, red, orange, yellow, green, blue, indigo
///     );
///   }
///
/// @param {string | list} $color -
///   The name or value of a color.
/// @param {colors} $options... -
///   A list of colors to contrast against,
///   defaulting to `white` and `black`
///   or your `contrast-light` and `contrast-dark` settings
///   (with or without a private `_` prefix)
///   if they are provided in the global `$colors` map.
/// @return {color} -
///   Whichever color-option has the highest contrast-ratio to `$color`.
@function contrast(
  $color,
  $options...
) {
  @return _a_best-contrast($color, $options, 'color');
}
@include _a_register-function('contrast');


// Min Contrast
// ------------
/// For any color, select the minimum passing contrast
/// among a set of options.
///
/// @group color-contrast
/// @example scss - explicit options
///   $background: #333;
///   html {
///     background: $background;
///     color: min-contrast(
///       $background, red, orange, yellow, green, blue, indigo
///     );
///   }
///
/// @param {string | list} $color -
///   The name or value of a color.
/// @param {'AA' | 'AA-large' | 'AAA' | number } $min-ratio ['AAA'] -
///   WCAG color-contrast ratio (`0` to `21`) to require.
/// @param {colors} $options... -
///   A list of colors to contrast against,
///   defaulting to `white` and `black`
///   or your `contrast-light` and `contrast-dark` settings
///   (with or without a private `_` prefix)
///   if they are provided in the global `$colors` map.
/// @return {color} -
///   Option with the lowest acceptable contrast-ratio to `$color`.
@function min-contrast(
  $color,
  $min-ratio: 'AAA',
  $options...
) {
  @return _a_best-contrast($color, $options, 'color', $min-ratio);
}
@include _a_register-function('min-contrast');


// Contrasted
// ----------
/// Apply any background color,
/// along with the highest-contrast text color from a set of options.
/// This works the same as the `contrast` function,
/// but applies the resulting values to `background-color`
/// and text `color` properties.
///
/// @group color-contrast
/// @example scss - default options
///   $background: #333;
///   html {
///     @include contrasted($background);
///   }
/// @example scss - explicit options
///   $background: #333;
///   html {
///     @include contrasted(
///       $background, red, orange, yellow, green, blue, indigo
///     );
///   }
///
/// @param {string | list} $background -
///   The name or value of your desired background color.
/// @param {colors} $options... -
///   A list of colors to contrast against,
///   defaulting to `white` and `black`
///   or your `contrast-light` and `contrast-dark` settings
///   (with or without a private `_` prefix)
///   if they are provided in the global `$colors` map.
/// @output -
///   Sets the `background-color` to `$background`
///   and the foreground `color` to
///   whichever option has better contrast against the given background.
@mixin contrasted(
  $background,
  $options...
) {
  $background: color($background);

  background-color: $background;
  color: contrast($background, $options...);
}


// Min Contrasted
// --------------
/// Apply any background color,
/// along with the minimum-acceptable contrast text color
/// from a set of options.
/// This works the same as the `min-contrast` function,
/// but applies the resulting values to `background-color`
/// and text `color` properties.
///
/// @group color-contrast
/// @example scss - explicit options
///   $background: #333;
///   html {
///     @include min-contrasted(
///       $background, red, orange, yellow, green, blue, indigo
///     );
///   }
///
/// @param {string | list} $background -
///   The name or value of your desired background color.
///   An optional WCAG contrast ratio to require.
/// @param {'AA' | 'AA-large' | 'AAA' | number } $min-ratio ['AAA'] -
///   WCAG color-contrast ratio (`0` to `21`) to require.
/// @param {colors} $options... -
///   A list of colors to contrast against,
///   defaulting to `white` and `black`
///   or your `contrast-light` and `contrast-dark` settings
///   (with or without a private `_` prefix)
///   if they are provided in the global `$colors` map.
/// @output -
///   Sets the `background-color` to `$background`
///   and the foreground `color` to
///   whichever option has better contrast against the given background.
@mixin min-contrasted(
  $background,
  $min-ratio: 'AAA',
  $options...
) {
  $background: color($background);

  background-color: $background;
  color: min-contrast($background, $min-ratio, $options...);
}


// Contrast Ratio
// --------------
/// Compare two colors using the WCAG comparison algorithm,
/// and return the resulting contrast-ratio.
/// Optionally pass in a standard (AA, AAA, AA-large)
/// and return `false` when the contrast-check fails.
///
/// - 'AA-large' == `3:1`
/// - 'AA' == `4.5:1`
/// - 'AAA' == `7:1`
///
/// @group color-contrast
/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef WCAG Contrast Definition
/// @example scss
///   /* black and white: #{contrast-ratio(white, black)} */
///   /* failed 'AAA': #{contrast-ratio(white, #999, 'AAA')} */
///
/// @param {string | list | number} $color -
///   The name of a color in your palette,
///   any other color value,
///   or even a pre-calculated numeric luminance.
/// @param {string | list | number} $contrast -
///   The name or value of a color to contrast against the first.
/// @param {'AA' | 'AA-large' | 'AAA' | number | false} $require [false] -
///   An optional WCAG contrast ratio to require.
///   The function will return `false` if the required ratio is not met.
/// @return {number} -
///   The WCAG-defined contrast-ratio of two colors.
@function contrast-ratio(
  $base,
  $contrast,
  $require: false
) {
  $is-lumins: (type-of($base) == 'number');
  $uppercase: (
    'aaa': 'AAA',
    'aa': 'AA',
    'aa-large': 'AA-large'
  );

  $base-lumin: if($is-lumins, $base, luminance($base));
  $contrast-lumin: if($is-lumins, $contrast, luminance($contrast));

  $darker: min($base-lumin, $contrast-lumin);
  $lighter: max($base-lumin, $contrast-lumin);

  $ratio: ($lighter + 0.05) / ($darker + 0.05);

  @if (type-of($require) != 'number') {
    $require: map-get($uppercase, $require) or $require;
    $require: map-get($WCAG-CONTRAST, $require);
  }

  @if $require and ($ratio < $require) {
    @return false;
  }

  @return $ratio;
}


// Luminance
// ---------
/// Get the WCAG luminance of a color in your palette.
///
/// @group color-contrast
/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef WCAG Relative Luminance
///
/// @param {string | list} $color -
///   The name or value of a color.
/// @return {number} -
///   WCAG-defined numeric luminance value.
@function luminance(
  $color
) {
  $color: color($color);
  $color: _a_type-check($color, 'color', 'luminance', '$color');
  $luminance: 0;

  @each $component in 'red' 'green' 'blue' {
    $function: $component;

    @if function-exists('get-function') {
      $function: get-function($component);
    }

    $value: call($function, $color) / 255;

    @if ($value < 0.03928) {
      $value: $value / 12.92;
    } @else {
      $base: ($value + 0.055) / 1.055;
      $value: _a_pow($base, 2.4);
    }

    @if ($component == 'red') {
      $value: $value * 0.2126;
    } @else if ($component == 'green') {
      $value: $value * 0.7152;
    } @else {
      $value: $value * 0.0722;
    }

    $luminance: $luminance + $value;
  }

  @return $luminance;
}


// Default Contrast
// ----------------
/// Access the user or system default contrast values.
///
/// @access private
/// @since 2.1.0 -
/// - NEW: Allows for either private or public defaults
///
/// @param {'light' | 'dark' | 'values' | 'map'} $return -
///   Return the light value, dark value, both values, or a map
/// @return {color-name | map} -
///   Light or dark color-name string,
///   or map with `light` and `dark` keys.
@function _a_default-contrast(
  $return: 'both'
) {
  $both: (
    'light': if(
      map-has-key($colors, 'contrast-light'),
      'contrast-light',
      '_contrast-light'
    ),
    'dark': if(
      map-has-key($colors, 'contrast-dark'),
      'contrast-dark',
      '_contrast-dark'
    ),
  );

  @if ($return == 'values') {
    @return map-values($both);
  }

  @return map-get($both, $return) or $both;
}


// Best Contrast
// -------------
/// For any color, select the best contrast among a set of options.
/// Returns the highest contrast by default,
/// or the minimum contrast to meet a particular ratio cutoff.
///
/// Unlike the `contrast` function,
/// `_a_best-contrast` can return the color name,
/// output value, ratio, or all three.
///
/// @access private
/// @since 2.1.0 -
/// - NEW: Provides access to both name and value of result
/// - NEW: Provides a smart default for comparison against a single option
///
/// @param {string | list} $color -
///   The name or value of a color.
/// @param {list} $options [null] -
///   Any number of colors to contrast against.
///   This function will choose the best contrast of all the options provided,
///   or use the `contrast-light` and `contrast-dark` defaults.
/// @param {'map' | 'name' | 'color' | 'ratio'} $return ['map'] -
///   Return either a token name, color value, best-ratio
///   or all three together in a map.
/// @param {number | 'AA-large' | 'AA' | 'AAA' | false} $min-ratio [false] -
///   Return either a token name, color value, best-ratio
///   or all three together in a map.
/// @return {color} -
///   Whichever color-option has the highest contrast-ratio to `$color`.
@function _a_best-contrast(
  $color,
  $options: null,
  $return: 'map',
  $min-ratio: false
) {
  // Establish default options if they are missing
  @if (length($options) == 0) or (not $options) {
    $options: _a_default-contrast('values');
  } @else if (length($options) == 1 ){
    $use: _a_best-contrast(nth($options, 1), $return: 'name');
    $options: append($options, $use);
  }

  // Get the colors and their contrasts
  $color-val: color($color);
  $color-lum: luminance($color-val);
  $best: (
    'name': null,
    'color': null,
    'ratio': null,
  );

  @each $name in $options {
    // 22 is above the highest possible, 0 is below the lowest
    $best-ratio: map-get($best, 'ratio') or if($min-ratio, 22, 0);
    $better: false;
    $value: color($name);
    $lum: luminance($value);
    $ratio: contrast-ratio($color-lum, $lum, $min-ratio);

    @if $min-ratio and $ratio {
      $better: ($ratio < $best-ratio);
    } @else if $ratio {
      $better: ($ratio > $best-ratio);
    }

    @if $better {
      $best: (
        'name': $name,
        'color': $value,
        'ratio': $ratio,
      );
    }
  }

  @if (map-get($best, 'name')) {
    @return map-get($best, $return) or $best;
  }

  @return false;
}
