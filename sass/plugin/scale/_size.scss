/// # Accessing Sizes
/// @group scale-sizes


// Size [function]
// ---------------
/// Access a named size in your `$sizes` map,
/// using any comparable units.
///
/// @group scale-sizes
///
/// @param {string | length | list} $size -
///   The name of a size in your configuration (e.g. `line-height`),
///   or a length to be converted into different units (e.g. `24px`),
///   or a base-size and adjustments to be made
///   (e.g. `24px ('minor-third': 2)`),
///   or a `calc(%s + %s) ('root', 'rhythm')` recipie
///   for building `calc` values.
///   For the sake of consistent documentation,
///   I recommend keeping adjustments in the configuration
///   whenever possible.
/// @param {vararg} $unit... -
///   The desired unit for the output (e.g. `px` or `rem`),
///   and any other arguments required for the conversion.
/// @return {length} -
///   The calculated length, in the requested units.
@function size(
  $size,
  $unit...
) {
  $size: get-token($sizes, $size);
  $size: if(length($unit) > 0, convert-units($size, $unit...), $size);
  @return $size;
}


// Negative [function]
// -------------------
/// Return the inverse value of any length,
/// in comparable units.
///
/// @group scale-sizes
///
/// @param {string | length | list} $size -
///   The name of a size in your configuration (e.g. `line-height`),
///   or a length to be converted into different units (e.g. `24px`),
///   or a base-size and adjustments to be made
///   (e.g. `24px ('minor-third': 2)`).
///   For the sake of consistent documentation,
///   I recommend keeping adjustments in the configuration
///   whenever possible.
/// @param {vararg} $unit... -
///   The desired unit for the output (e.g. `px` or `rem`),
///   and any other arguments required for the conversion.
/// @return {length} -
///   The calculated negative length, in the requested units.
@function negative(
  $size,
  $unit...
) {
  $size: size($size, $unit...);

  @if (type-of($size) == 'string') {
    $size: _a_str-replace($size, 'calc(', 'calc(-1 * (');
    $size: str-slice($size, 1, -2) + '))';
    @return $size;
  }

  @return -1 * size($size, $unit...);
}


// Square [mixin]
// --------------
/// Create a square by setting equal CSS `height` and `width` properties
/// with the given size & unit value.
///
/// @group scale-sizes
///
/// @param {string | length | list} $size -
///   The name of a size in your configuration (e.g. `line-height`),
///   or a length to be converted into different units (e.g. `24px`),
///   or a base-size and adjustments to be made
///   (e.g. `24px ('minor-third': 2)`).
///   For the sake of consistent documentation,
///   I recommend keeping adjustments in the configuration
///   whenever possible.
/// @param {vararg} $unit... -
///   The desired unit for the output (e.g. `px` or `rem`),
///   and any other arguments required for the conversion.
/// @output -
///   Equal CSS height and width properties,
///   set to the given size and units.
@mixin square(
  $size,
  $unit...
) {
  $size: size($size, $unit...);

  height: $size;
  width: $size;
}
