/// # Animations & Transitions
/// Combine your `$times` and `$changes` values
/// to create entire transitions and animations --
/// all stored in one place and easy to access
/// for consistent "changes" across your project.
/// @group animate-change


// Changes Map
// -----------
/// A variable storing the map of
/// all your standardized changes (transitions and animations).
/// Any changes added to the `$changes` map will be accesible
/// to the `change()` function by default.
///
/// Define each change with a `name` and `value`,
/// or use interpolation to compose more complex changes.
///
/// ```
/// $changes: (
///   // single animation
///   'glow': glow time('slow') ease('in-out-quad') infinite alternate,
///
///   // single transitions
///   'slide': transform time('fast'),
///   'fade': opacity time('fade') ease('out-quad'),
///
///   // interolate using '#name' (quotes optional)
///   // to build on existing "changes"
///   'slide-in': #slide ease('out-back'),
///   'slide-out': '#slide' ease('in'),
///
///   // or string together multiple "changes"
///   'sidebar-in': ('#slide-in', '#fade' time('delay')),
///
///   // or create a 1-to-1 alias
///   'modal-in': #sidebar-in,
/// );
/// ```
///
/// - Name your changes anything â€“
///   from abstractions like `fade`,
///   to concrete patterns like `sidebar-in`.
/// - Values can be CSS-ready values,
///   references other changes in the map,
///   or format strings to interpolate.
///
/// @group animate-change
/// @see {function} change
$changes: () !default;


// Change [function]
// -----------------
/// Access a named change in your `$changes` map.
///
/// @group animate-change
///
/// @param {string} $name -
///   The name of a change in your configuration (e.g. `fade-in`).
/// @return {length} -
///   The change value requested
@function change(
  $name
) {
  @return get-token($changes, $name);
}
@include _a_register-function('change');


// Add Changes
// -----------
/// Merge individual change maps into the global `$changes` variable,
/// in case you want to define changes in smaller groups --
/// such as `button-changes`, `page-changes`, etc --
/// before merging them into a single global changes-palette.
///
/// @group animate-change
///
/// @parameter {map...} $maps -
///   Pass any number of maps to be merged and added
/// @output -
///   An updated global `$changes` variable,
///   with new maps merged in.
@mixin add-changes(
  $maps...
) {
  $changes: _a_map-multimerge($changes, $maps...) !global;
}
