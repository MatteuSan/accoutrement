/// # Sass String Utilities
/// Functions for basic Sass-string manipulation.
/// While these functions are defined with private prefixes,
/// they are registered without the prefix for map-access.
/// @group core-strings


// String Replace
// --------------
/// Replace a substring inside a larger string,
/// or replace the entirety of the string.
///
/// This function is prefixed outside maps
/// & should not be used directly,
/// but is available in all accoutrement maps
/// under the `'str-replace'` alias.
///
/// @access public
/// @name str-replace
/// @group core-strings
/// @example scss
///   // sass treats calc() as a string,
///   // so we can use string-functions to manipulate calc values…
///   $map: (
///     'text-size': calc(1em + 1vw),
///     'large-text': '#text-size' ('str-replace': '1vw' '3vw'),
///   );
///   /*! #{get-token($map, 'large-text')} */
///
/// @param {string | list} $string -
///   The original string (or list of strings) to edit
/// @param {string} $old -
///   A sub-string to replace
/// @param {string} $new [null] -
///   A new sub-string to replace the old
/// @param {boolean} $replace-all [false] -
///   A new sub-string to replace the old
/// @return {string} -
///   Original string, with substring replaced
@function _a_str-replace(
  $string,
  $old,
  $new: null,
  $replace-all: false
) {
  $return: $string;

  @if (type-of($string) == 'list') {
    $return: _a_list-template($string);
    @each $item in $string {
      $item: _a_str-replace($item, $old, $new, $replace-all);
      $return: append($return, $item);
    }
    @return $return;
  }

  $i: str-index($string, $old);
  $n: str-length($old);

  @if $string == $old {
    $return: $new;
  } @else if $i {
    $a: if($i > 1, str-slice($string, 1, $i - 1), '');
    $z: str-slice($string, $i + $n);

    @if $replace-all {
      $z: _a_str-replace($z, $old, $new, true);
    }

    $return: $a + if($new, $new, '') + $z;
  }

  @return $return;
}
@include _a_register-function('_a_str-replace', 'str-replace');


// Interpolate
// -----------
/// Return a string with interpolated values
/// replacing `%s` placeholders in a format string.
///
/// This function is prefixed outside maps
/// & should not be used directly,
/// but is available in all accoutrement maps
/// under the `'interpolate'` or `'%s'` aliases.
///
/// @access public
/// @name interpolate
/// @group core-strings
/// @example scss
///   // sass treats calc() as a string,
///   // so we can use string-functions to manipulate calc values…
///   $map: (
///     'root': 16px,
///     'responsive': calc(%s + %s) ('%s': #root 0.5vw),
///   );
///   /*! #{get-token($map, 'responsive')} */
///
/// @param {string} $string -
///   The original string to be edited
/// @param {strings} $values... -
///   New strings, to replace the `%s` format strings
/// @return {string} -
///   Original string, with `%s` format strings replaced
@function _a_interpolate(
  $string,
  $values...
) {
  $_return: $string;

  @each $val in $values {
    @if str-index($_return, '%s') {
      $_return: _a_str-replace($_return, '%s', $val);
    } @else {
      @warn 'Too many values passed for interpolation with "#{$string}".';
    }
  }

  @return $_return;
}
@include _a_register-function('_a_interpolate', 'interpolate', '%s');


// Split
// -----
/// Splits a string into a list of strings,
/// using the same logic as JavaScript's `split()` meathod.
///
/// This function is prefixed outside maps
/// & should not be used directly,
/// but is available in all accoutrement maps
/// under the `'split'` alias.
///
/// @access public
/// @name interpolate
/// @group core-strings
/// @example scss
///   $map: (
///     'list': 'hello world' ('split': ' '),
///   );
///   /*! #{get-token($map, 'list')} */
///
/// @param {string} $string -
///   The original string to be split
///   - Empty strings will be returned as a list of one empty string
/// @param {any} $separator [null] -
///   The string will be split on any instance of the separator,
///   and the separators will be removed
///   - Null or unfound separators will return a single-item list
///     with the original string
///   - Empty-string (`''`) separators will return a list of
///     all characters in the original string
///   - Non-string separators will be converted to strings before splitting
/// @param {intiger | null} $limit [null] -
///   Maximum length of the returned list
/// @return {list} -
///   Space-delimited list of string-slices from the original string
@function _a_split(
  $string,
  $separator: null,
  $limit: null
) {
  $list: ();

  @if (type-of($string) != 'string') {
    @error '$string value in `str-split` must be a string';
  }

  @if (not $separator) or ($string == '') {
    @return append($list, $string);
  }

  $length: str-length($string);
  $limit: if($limit, min($limit, $length), $length);
  $separator: if(type-of($separator) != 'string', '#{$separator}', $separator);
  $index: str-index($string, $separator);

  @for $i from 1 through $limit {
    @if ($string) {
      $slice: null;

      @if ($separator == '') {
        $length: str-length($string);

        @if ($length > 1) {
          $slice: str-slice($string, 1, 1);
          $string: str-slice($string, 2);
        } @else {
          $slice: if(($length == 1), $string, '');
          $string: null;
        }
      } @else if ($index) {
        $slice: str-slice($string, 1, $index - 1);
        $string: str-slice($string, $index + str-length($separator));
        $index: str-index($string, $separator);
        $slice: if($string and not $index, $slice $string, $slice);
      }

      $list: if($slice, join($list, $slice), $list);
    }
  }

  @return $list;
}
@include _a_register-function('_a_split', 'split');
