/// # Accessing Maps
/// @group core-get


// Get Token
// ---------
/// The primary function for accessing and parsing
/// accoutrement map values.
/// Each accoutrement plugin creates a shortcut wrapper function
/// for the specific map associated with that data-type.
/// You can do the same, or use it directly
/// to turn any arbitrary map into an accoutrement map.
///
/// @group core-get
/// @example scss - Access a map directly
///   $map: (
///     'original-value': 3em,
///     'new-value': '#original-value' (
///       'times': 2,
///       'minus': 0.5
///     ),
///   );
///   /*! New Value: #{get-token($map, 'new-value')} */
/// @example scss - Write your own shortcut plugin for specific maps
///   @function get($key) {
///     @return get-token($my-map, $key);
///   }
///
///   $my-map: ('main': 32em);
///   /*! Main: #{get('main')} */
///
/// @param {map} $map -
///   A map of token definitions to reference against
/// @param {*} $key -
///   The original key or value to be parsed for `#alias` tags
/// @return {*} -
///   The parsed value of any key in a given map
@function get-token(
  $map,
  $key
) {
  $key: map-get($map, $key) or $key;
  @return _a_get($map, $key);
}


// Get
// ---
/// Adds value/do functionality
/// to the value-parsing power of `_a_parse()`.
/// Functions can be added as a map at the end of a value --
/// but some use-cases may confuse the parser,
/// so we provide a more explicit map option with a `value` key,
/// forllowed by functions and args.
///
/// @access private
///
/// @param {map} $map -
///   A map of token definitions to reference against
/// @param {*} $key -
///   Map access key for parsing
/// @return {*} -
///   Final parsed and adjusted value from the original map
@function _a_get(
  $map,
  $key
) {
  $type: type-of($key);
  $do: null;
  $value: $key;

  // break out `do` maps…
  @if ($type == 'map') and map-get($key, 'value') {
    $value: map-get($key, 'value');
    $do: map-remove($key, 'value');
  } @else if index('list' 'arglist', $type) {
    $final: nth($key, -1);

    @if (length($key) > 1) and (type-of($final) == 'map') {
      $do: $final;
      $value: _a_remove-nth($key, -1);
      $value: if(length($value) == 1, nth($value, 1), $value);
    }
  }

  // resolve any #alias tags…
  $value: _a_parse($map, $value);

  // make any necessary adjustments…
  @if ($do) {
    @each $name, $args in $do {
      $value: _a_do($map, $name, $value, $args...)
    }
  }

  @return $value;
}


// Parse
// -----
/// Handles recursive parsing for list/map values.
///
/// @access private
///
/// @param {map} $haystack -
///   A map of terms to reference tags against
/// @param {*} $needle -
///   The original value to be parsed for `#alias` tags
/// @return {*} -
///   Updated `$needle` value
///   in the same format as the original,
///   but with all `#alias` tags replaced
@function _a_parse(
  $haystack,
  $needle
) {
  $type: type-of($needle);

  // handle list values…
  @if index('list' 'arglist', $type) {
    $new: _a_list-template($needle);

    // handle each item in the list…
    @each $bit in $needle {
      $new: append($new, _a_get($haystack, $bit));
    }

    @return $new;
  }

  // handle map values…
  @if ($type == 'map') {
    $new: ();

    // handle each value in the map…
    @each $key, $value in $needle {
      // check both maps
      $layers: map-merge($haystack, $needle);
      $key: _a_get($layers, $key);
      $value: _a_get($layers, $value);

      // update pair
      $needle: ($key: $value);
      $new: map-merge($new, $needle);
    }

    @return $new;
  }

  @if ($type == 'string') {
    $needle: _a_replace($haystack, $needle);
  }

  @return $needle;
}


// Replace
// -------
/// Search for `#alias` mentions within a string,
/// and return a list of unique mentions with `#` removed.
///
/// @access private
///
/// @param {map} $haystack -
///   A map of terms to reference tags against
/// @param {string} $string -
///   The original string to be parsed for `#alias` tags
/// @return {any} -
///   Input $string, with #alias mentions replaced
@function _a_replace(
  $haystack,
  $string
) {
  // replace aliases…
  @if str-index($string, '#') {
    // check longest keys first, in case of overlap
    @each $key in _a_str-length-sort(map-keys($haystack)) {
      $hash: '##{$key}';

      @if (type-of($string) == 'string') and str-index($string, $hash) {
        $new: get-token($haystack, $key);
        $string: _a_str-replace($string, $hash, $new, 'all');
      }
    }
  }

  @return $string;
}


// Do
// --
/// Applies any ratio or function adjustments
/// to Accoutrement map values
///
/// @access private
///
/// @param {map} $source -
///   A map of terms to reference tags against
/// @param {string | ratio | function} $name -
///   The ratio or function to use in manipulation
/// @param {*} $value -
///   The value to be manipulated
/// @param {arglist} $args... -
///   Any arguments required for a function call
/// @return {*} -
///   Manipulated value
@function _a_do(
  $source,
  $name,
  $value,
  $args...
) {
  // Allow internal map references
  $name: _a_get($source, $name);
  $args: _a_get($source, $args);

  // Handle null args…
  @if (length($args) == 1) {
    $args: nth($args, 1);
  }

  // Try ratios first
  @if type-of($value == 'number') {
    $ratio: ratio($name);

    @if ($ratio == 'linear') {
      @return $value * $args;
    } @else if (type-of($ratio) == 'number') {
      $multiplier: _a_pow($ratio, $args);
      @return $value * $multiplier;
    }
  }

  // Fallback to function calls
  $function: _a_get-function($name, $error: false);

  @if ($function) {
    @if ($args) {
      @return call($function, $value, $args...);
    } @else {
      @return call($function, $value);
    }
  }

  // error
  @error 'No ratio or function named #{$name}';
}
