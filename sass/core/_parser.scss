/// # Core Parser
/// @access private


// Get
// ---
/// Adds value/do functionality
/// to the value-parsing power of `_a_parse()`.
/// Functions can be added as a map at the end of a value --
/// but some use-cases may confuse the parser,
/// so we provide a more explicit map option with a `value` key,
/// followed by functions and args.
///
/// @access private
///
/// @param {map} $map -
///   A map of token definitions to reference against
/// @param {*} $key -
///   Map access key for parsing
/// @return {*} -
///   Final parsed and adjusted value from the original map
@function _a_get(
  $map,
  $key
) {
  $type: type-of($key);
  $do: null;
  $value: $key;

  // break out `do` maps…
  @if ($type == 'map') and map-get($key, 'value') {
    $value: map-get($key, 'value');
    $do: map-remove($key, 'value');
  } @else if index('list' 'arglist', $type) {
    $final: nth($key, -1);

    @if (length($key) > 1) and (type-of($final) == 'map') {
      $do: $final;
      $value: _a_remove-nth($key, -1);
      $value: if(length($value) == 1, nth($value, 1), $value);
    }
  }

  // resolve any #alias tags…
  $value: _a_parse($map, $value);

  // make any necessary adjustments…
  $value: _a_do-each($map, $value, $do);

  @return $value;
}


// Parse
// -----
/// Handles recursive parsing for list/map values.
///
/// @access private
///
/// @param {map} $haystack -
///   A map of terms to reference tags against
/// @param {*} $needle -
///   The original value to be parsed for `#alias` tags
/// @return {*} -
///   Updated `$needle` value
///   in the same format as the original,
///   but with all `#alias` tags replaced
@function _a_parse(
  $haystack,
  $needle
) {
  $type: type-of($needle);

  // handle list values…
  @if index('list' 'arglist', $type) {
    $new: _a_list-template($needle);

    // handle each item in the list…
    @each $bit in $needle {
      $new: append($new, _a_get($haystack, $bit));
    }

    @return $new;
  }

  // handle map values…
  @if ($type == 'map') {
    $new: ();

    // create a list of keys and values in the current map scope
    $keys: map-keys($needle);
    $values: map-values($needle);

    // handle each value in the map…
    @each $key, $value in $needle {
      $index: index($keys, $key);

      // check in the $needle
      $newkey: _a_get($needle, $key);
      $keytype: type-of($newkey);
      $newvalue: _a_get($needle, $value);
      $valuetype: type-of($newvalue);

      // if the key isn't found in the $needle or is a #reference,
      // check the $haystack with the $newkey
      @if type-of($newkey) != 'string' or str-index($newkey, "#") {
        $newkey: _a_get($haystack, $newkey);
      }

      // if the value isn't found in the $needle or is a #reference,
      // check the $haystack
      @if ($valuetype != 'string') or str-index($newvalue, "#") {
        // if we're dealing with a map or a #reference,
        // search with the $newvalue
        @if ($valuetype == 'map')
          or (($valuetype == 'string') and str-index($newvalue, "#")) {
          $newvalue: _a_get($haystack, $newvalue);
        }
        // otherwise, search with the original value
        @else {
          $newvalue: _a_get($haystack, $value);
        }
      }

      // update the lists of keys and values with the new ones
      $keys: set-nth($keys, $index, $newkey);
      $values: set-nth($values, $index, $newvalue);

      // erase $new to guarantee a fresh map
      $new: ();

      // rebuild the map from the new keys and values
      @each $k in $keys {
        $new: map-merge($new, (
          $k: nth($values, index($keys, $k))
        ));
      }
    }

    @return $new;
  }

  @if ($type == 'string') {
    $needle: _a_replace($haystack, $needle);
  }

  @return $needle;
}


// Replace
// -------
/// Search for `#alias` mentions within a string,
/// and return the string with aliases replaced.
///
/// @since 2.0.0 -
/// - NEW: Handles access to nested-map tokens
///   using the hashtag `'#first->second->third'` syntax
///
/// @access private
///
/// @param {map} $haystack -
///   A map of terms to reference tags against
/// @param {string} $string -
///   The original string to be parsed for `#alias` tags
/// @return {*} -
///   Input $string, with #alias mentions replaced
@function _a_replace(
  $haystack,
  $string
) {
  // replace aliases…
  @if str-index($string, '#') {
    // check longest keys first, in case of overlap
    @each $key in _a_str-length-sort(map-keys($haystack)) {
      $hash: '##{$key}';

      @if (type-of($string) == 'string') and str-index($string, $hash) {
        $new: get-token($haystack, $key);

        @if (type-of($new) == 'map') and str-index($string, '#{$hash}->') {
          $deep: _a_str-replace($string, '#{$hash}->', '#', 'all');
          $try: _a_replace($new, $deep);

          @if ($try != $deep) {
            @return $try;
          }
        }

        $string: _a_str-replace($string, $hash, $new, 'all');
      }
    }
  }

  @return $string;
}


// Do Each
// -------
/// A wrapper for calling `_a_do()`
/// over each item in an adjustments list.
///
/// @access private
///
/// @param {map} $map -
///   A map of terms to reference tags against
/// @param {*} $value -
///   The value to be manipulated
/// @param {map | null} $do [null] -
///   A map of function/ratio adjustments to run on the returned value
@function _a_do-each(
  $map,
  $value,
  $do: null
) {
  @if ($do) {
    @each $name, $args in $do {
      $value: _a_do($map, $name, $value, $args...);
    }
  }

  @return $value;
}


// Do
// --
/// Applies any ratio or function adjustments
/// to Accoutrement map values
///
/// @access private
///
/// @param {map} $source -
///   A map of terms to reference tags against
/// @param {string | ratio | function} $name -
///   The ratio or function to use in manipulation
/// @param {*} $value -
///   The value to be manipulated
/// @param {arglist} $args... -
///   Any arguments required for a function call
/// @return {*} -
///   Manipulated value
/// @throws No ratio or function found with the given name
@function _a_do(
  $source,
  $name,
  $value,
  $args...
) {
  // Allow internal map references
  $name: _a_get($source, $name);
  $args: _a_get($source, $args);

  // Handle null args…
  @if (length($args) == 1) {
    $args: nth($args, 1);
  }

  // Try ratios first
  @if type-of($value == 'number') {
    $ratio: ratio($name);

    @if ($ratio == 'linear') {
      @return $value * $args;
    } @else if (type-of($ratio) == 'number') {
      $multiplier: _a_pow($ratio, $args);
      @return $value * $multiplier;
    }
  }

  // Fallback to function calls
  $function: _a_get-function($name);

  @if ($function) {
    @if ($args) {
      @return call($function, $value, $args...);
    } @else {
      @return call($function, $value);
    }
  }

  // error
  @return _a_error(
    'No ratio or function named `#{$name}`',
    '_a_do'
  );
}
