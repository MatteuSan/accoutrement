/// # Core Configuration
/// The Accoutrement tools rely on a map syntax
/// inspired by functional programming:
///
/// ```scss
/// $map: (
///   'original-value': 3em,
///
///   // explicit sub-map with 'value' and function properties:
///   'new-value': (
///     'value': '#original-value' ,
///     'times': 2,
///     'minus': 0.5,
///   ),
///
///   // implicit value/function shorthand:
///   'new-value-2': '#original-value' ('times': 2, 'minus': 0.5),
/// );
/// ```
///
/// Each function in the function map
/// (e.g. `times` and `minus` above)
/// will be run in order --
/// with any associated arguments
/// (`e.g. minus(times(#original-value, 2), 0.5)`) --
/// to create a new value based on the base `value`.
///
/// Sass 3.5+ provides first-class functions,
/// and 4.0 is expected to include module namespacing features.
/// Since we want to integrate with user-defined functions,
/// we provide tools for storing first-class functions
/// and making them accessible to all the accoutrment plugins.
///
/// We provide a standard set of
/// [math utilities](./math.html) that you can use,
/// along with a few
/// [list](./lists.html) and [string](./strings.html) helpers
/// that we use internally.
///
/// The tools below will allow you
/// to register first-class functions of your own,
/// making them available to all Accoutrement maps.
/// @group core-config


// Functions
// ---------
/// You can also use third-party (or Sass-native) functions.
/// Because Sass 3.5+ requires first-class functions,
/// we provide a single place to store & manage functions
/// that you would like to use with Accoutrement Animate.
///
/// Define any third-party functions required
/// by your `$times`, `$easing`, or `$changes` maps.
/// This is only necessary for newer versions of Sass,
/// where functions are first-class,
/// and can be captured using `get-function($name)`.
///
/// ```scss
/// $functions: (
///   'times': get-function('times'),
///   'divide': get-function('divide'),
/// );
/// ```
///
/// @group core-config
/// @type map
///
/// @prop {string} <alias> -
///   Each alias key in the map
///   should refer to a captured function
$functions: () !default;



// Register Function
// -----------------
/// In addition to managing the `$functions` map directly,
/// you can also register new functions on the fly:
///
/// ```scss
///   // the first value is the function name,
///   // any additional values provide alias names for the same function
///   @include register-function('rgba', 'alpha');
/// ```
///
/// Functions only need to be registered
/// if they will be used inside accoutrement maps.
/// That includes core Sass functions.
///
/// @group core-config
/// @see {function} _a_get-function()
///
/// @param {string | function} $function -
///   The function-name to be registered
///   or a first-class function previously captured
/// @param {strings} $names... [$function] -
///   One or more alias names (strings)
///   to use for map-access to the function
/// @output {map} $_ACCOUTREMENT_APP -
///   Functions are registered in a map
///   under any number of aliases
@mixin register-function(
  $function,
  $names...
) {
  $register: _a_registration($function, $names, $functions);
  $functions: $register !global;
}
