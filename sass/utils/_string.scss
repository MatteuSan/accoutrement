@use 'sass:meta';
@use 'sass:math';
@use 'sass:string';
@use 'sass:list';
@use 'list' as l;
@use 'throw';
@use 'type';

/// # String functions
/// Functions for basic Sass-string manipulation.
/// While these functions are defined with private prefixes,
/// they are registered without the prefix for map-access.
/// @group core-strings


@function force(
  $value
) {
  @return if((meta.type-of($value) == 'string'), $value, '#{$value}');
}


// String Replace
// --------------
/// Replace a substring inside a larger string,
/// or replace the entirety of the string.
///
/// This function is prefixed outside maps
/// & should not be used directly,
/// but is available in all accoutrement maps
/// under the `'str-replace'` alias.
///
/// @since 1.0.0 -
/// - NEW: Improved handling of non-string values,
///   allows you to replace a number within a string, for example
///
/// @group core-strings
/// @example scss
///   // sass treats calc() as a string,
///   // so we can use string-functions to manipulate calc values…
///   $map: (
///     'text-size': calc(1em + 1vw),
///     'large-text': '#text-size' ('string.replace': '1vw' '3vw'),
///   );
///   /*! #{get-token($map, 'large-text')} */
///
/// @param {string | list} $string -
///   The original string (or list of strings) to edit
/// @param {*} $old -
///   A sub-string to replace
/// @param {*} $new [''] -
///   A new sub-string to replace the old
/// @param {boolean} $all [false] -
///   A new sub-string to replace the old
/// @return {string} -
///   Original string, with substring replaced
@function replace(
  $string,
  $old,
  $new: '',
  $all: false
) {
  $return: $string;
  $type: meta.type-of($string);

  // Loops lists
  @if ($type == 'list') {
    $return: l.template($string);
    @each $item in $string {
      $item: replace($item, $old, $new, $all);
      $return: list.append($return, $item);
    }
    @return $return;
  }

  // Force $old to string
  $old: force($old);
  $string: force($string);

  // get length and index
  $i: string.index($string, $old);
  $n: string.length($old);

  // replace…
  @if $string == $old {
    @return $new;
  } @else if $i {
    // Force $new & $string to string
    $new: if($new, force($new), '');

    // before and after…
    $a: if($i > 1, string.slice($string, 1, $i - 1), '');
    $z: string.slice($string, $i + $n);

    // recurion if needed…
    @if $all {
      $z: replace($z, $old, $new, true);
    }

    // re-compile…
    @return $a + $new + $z;
  }

  @return $return;
}


// Interpolate
// -----------
/// Return a string with interpolated values
/// replacing `%s` placeholders in a format string.
///
/// This function is prefixed outside maps
/// & should not be used directly,
/// but is available in all accoutrement maps
/// under the `'interpolate'` or `'%s'` aliases.
///
/// @group core-strings
/// @example scss
///   // sass treats calc() as a string,
///   // so we can use string-functions to manipulate calc values…
///   $map: (
///     'root': 16px,
///     'responsive': 'calc(%s + %s)' ('%s': '#root' 0.5vw),
///   );
///   /*! #{get-token($map, 'responsive')} */
///
/// @param {string} $string -
///   The original string to be edited
/// @param {*} $values... -
///   New strings, to replace the `%s` format strings
/// @return {string} -
///   Original string, with `%s` format strings replaced
/// @throws Too many interpolation values given for the string
@function interpolate(
  $string,
  $values...
) {
  $string: type.check($string, 'string', 'interpolate', '$string');
  $return: $string;

  @each $val in $values {
    @if string.index($return, '%s') {
      $return: replace($return, '%s', $val);
    } @else {
      $length: list.length($values);
      @return throw.error(
        'Too many interpolation values (#{$length}) given for `#{$string}`',
        'interpolate'
      );
    }
  }

  @return $return;
}


// Split
// -----
/// Splits a string into a list of strings,
/// using the same logic as JavaScript's `split()` meathod.
///
/// This function is prefixed outside maps
/// & should not be used directly,
/// but is available in all accoutrement maps
/// under the `'str-split'` or `'split'` aliases.
///
/// @since 1.0.0 -
/// - NEW: Aliased as `str-split`
///
/// @group core-strings
/// @example scss
///   $map: (
///     'list': 'hello world' ('split': ' '),
///   );
///   /*! #{get-token($map, 'list')} */
///
/// @param {string} $string -
///   The original string to be split
///   - Empty strings will be returned as a list of one empty string
/// @param {*} $separator [null] -
///   The string will be split on any instance of the separator,
///   and the separators will be removed
///   - Null or unfound separators will return a single-item list
///     with the original string
///   - Empty-string (`''`) separators will return a list of
///     all characters in the original string
///   - Non-string separators will be converted to strings before splitting
/// @param {integer | null} $limit [null] -
///   Maximum length of the returned list
/// @return {list} -
///   Space-delimited list of string-slices from the original string
@function split(
  $string,
  $separator: null,
  $limit: null
) {
  $list: ();

  @if (not $separator) or ($string == '') {
    @return list.append($list, $string);
  }

  $string: force($string);
  $separator: force($separator);
  $length: string.length($string);
  $limit: if($limit, math.min($limit, $length), $length);
  $index: string.index($string, $separator);

  @for $i from 1 through $limit {
    @if ($string) {
      $slice: null;

      @if ($separator == '') {
        $length: string.length($string);

        @if ($length > 1) {
          $slice: string.slice($string, 1, 1);
          $string: string.slice($string, 2);
        } @else {
          $slice: if(($length == 1), $string, '');
          $string: null;
        }
      } @else if ($index) {
        $slice: string.slice($string, 1, $index - 1);
        $string: string.slice($string, $index + string.length($separator));
        $index: string.index($string, $separator);
        $slice: if($string and not $index, $slice $string, $slice);
      }

      $list: if($slice, join($list, $slice), $list);
    }
  }

  @return $list;
}


// Trim
// ----
/// Trims whitespace from the start and end of a string.
///
/// This function is prefixed outside maps
/// & should not be used directly,
/// but is available in all accoutrement maps
/// under the `'str-trim'` or `'trim'` aliases.
///
/// @since 1.0.0 -
/// - NEW: Strips whitespace
/// - NEW: Aliased as `str-trim`
///
/// @access public
/// @name string.trim
/// @group core-strings
/// @example scss
///   $map: (
///     // null value is needed for single-argument functions…
///     'trim': '  hello world     ' ('trim': null),
///   );
///   /*! #{get-token($map, 'trim')} */
///
/// @param {string} $string -
///   The original string to be trimmed
/// @return {string} -
///   Trimmed string
@function trim(
  $string
) {
  $string: type.check($string, 'string', 'string.trim', '$string');
  $first: (string.slice($string, 1, 1) == ' ');
  $last: (string.slice($string, -1) == ' ');

  @if ($first or $last) {
    $string: if($first, string.slice($string, 2), $string);
    $string: if($last, string.slice($string, 1, -2), $string);
    $string: trim($string);
  }

  @return $string;
}
