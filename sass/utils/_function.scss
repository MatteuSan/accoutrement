@use 'sass:meta';
@use 'sass:map';
@use 'sass:list';
@use 'type';
@use 'throw';

// Internal Functions
// ------------------
/// These functions are defined internally,
/// and can be called by name without first being captured
/// using the Sass `get-function()` approach.
/// User should not make changes to this map.
///
/// @access private
/// @group core-registers
/// @type map
$default-functions: ();


// Set [mixin]
// -----------
/// Register internal functions.
///
/// @access private
/// @group core-register
/// @param {function} $function -
///   The function-name to be registered,
///   or a first-class function previously captured
/// @param {string | arglist} $names... -
///   One or more alias names (strings)
///   to use for map-access to the function
@mixin set(
  $function,
  $names...
) {
  $default-functions: set($default-functions, $function, $names...) !global;
}

// Registration
// ------------
/// This function provides the shared logic used by
/// `register-function()` (for user registration)
/// and `register-internal()` (for internal use).
///
/// @access private
/// @group core-register
///
/// @param {map} $source -
///   The original map source in which to register a function
/// @param {string | function} $function -
///   The function-name to be registered,
///   or a first-class function previously captured
/// @param {string | arglist} $names... -
///   One or more alias names (strings)
///   to use for map-access to the function
/// @return {map} -
///   Updated registration map
/// @throws `$function` is not available to register with Accoutrement
@function set(
  $source,
  $function,
  $names...
) {
  $origin: 'function-registration';
  $type: type.check($function, 'function');

  @if (list.length($names) == 0) {
    $error: 'Provide at least one name for this function registration';
    @return throw.error($error, $origin);
  }

  // register captured functions
  @each $name in $names {
    @if get($name, $source) {
      $error: 'A function has already been registered under the name `#{$name}`';
      @return throw.error($error, $origin);
    }

    $source: map.merge($source, ($name: $function));
  }

  @return $source;
}

// Get Function
// ------------
/// Get a function from registration.
///
/// @access private
/// @group core-register
///
/// @param {string} $name -
///   The name (string) of a registered function
/// @param {map} $source ['()'] -
///   Optionally pass an additional function-map
/// @return {function | null} -
///   Returns a first-class function, if found in registration
@function get(
  $name,
  $source: ()
) {
  @return map.get($source, $name) map.get($default-functions, $name);
}
