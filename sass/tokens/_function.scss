@use 'sass:meta';
@use 'sass:map';
@use 'sass:list';
@use '../internal/type';
@use '../internal/throw';

/// # Function Registration
/// Because Sass 3.5+ requires first-class functions,
/// we provide tools for capturing functions
/// and making them available to the Accoutrement map parser.
/// This also provides the ability to alias functions as you like.
/// @group core-register

// Functions
// ---------
/// We provide a single map to store & manage functions
/// that you would like to use inside Accoutrement maps.
///
/// ```scss
/// $functions: (
///   'inspect': meta.get-function('inspect', $module: 'meta'),
/// );
/// ```
///
/// Functions can be registered multiple times,
/// under any aliases,
/// but function maps are not able to use
/// the alias syntax.
///
/// @since 0.1.0 -
/// - NEW: Supports the [core](core.html) map-reference syntax,
///   for creating function aliases
///
/// @group core-register
/// @type map
///
/// @prop {function} <alias> -
///   Each alias key in the map
///   should refer to a captured function
$functions: () !default;

// Internal Functions
// ------------------
/// These functions are defined internally,
/// and can be called by name without first being captured
/// using the Sass `get-function()` approach.
/// User should not make changes to this map.
///
/// @access private
/// @group core-register
/// @type map
$internal: ();


// Get Function
// ------------
/// Get a function from registration.
///
/// @access private
/// @group core-register
///
/// @param {string} $name -
///   The name (string) of a registered function
/// @param {map} $source ['()'] -
///   Optionally pass an additional function-map
/// @param {map} $throw [false] -
///   Optionally error when functions are missing or improperly registered
/// @return {function | null} -
///   Returns a first-class function, if found in registration
/// @throws `#{$function}` is not a valid function for performing token adjustments
@function get(
  $name,
  $source: (),
  $throw: false,
) {
  $function: map.get($source, $name) or map.get($functions, $name) or map.get($internal, $name);

  // optional error handling
  @if $throw and (meta.type-of($function) != 'function') {
    $message: '`#{$name}` is not a registered function';

    @if ($function != null) {
      $message: '`#{$name}` (`#{$function}`) is not a valid function for performing token adjustments';
    }

    @return throw.error($message, 'function.get');
  }

  @return $function;
}


// Registration
// ------------
/// This function provides the shared logic used by
/// `function.register()` (for user registration)
/// and `function.internal()` (for internal use).
///
/// @access private
/// @group core-register
///
/// @param {map} $source -
///   The original map source in which to register a function
/// @param {function} $function -
///   The function to be registered
/// @param {string | arglist} $names... -
///   One or more alias names (strings)
///   to use for map-access to the function
/// @return {map} -
///   Updated registration map
/// @throws `$function` is not available to register with Accoutrement
@function set(
  $source,
  $function,
  $names...
) {
  $origin: 'function-register';

  @if not type.check($function, 'function') {
    @return type.error($function, 'function', $origin, '$function');
  }

  @if (list.length($names) == 0) {
    $error: 'Provide at least one name for this function';
    @return throw.error($error, $origin);
  }

  // register captured functions
  @each $name in $names {
    @if get($name, $source) {
      $error: 'A function has already been registered under the name `#{$name}`';
      @return throw.error($error, $origin);
    }

    $source: map.merge($source, ($name: $function));
  }

  @return $source;
}


// Internal [mixin]
// ----------------
/// Register internal functions.
///
/// @access private
/// @group core-register
/// @param {function} $function -
///   The function to be registered
/// @param {string | arglist} $names... -
///   One or more alias names (strings)
///   to use for map-access to the function
@mixin internal(
  $function,
  $names...
) {
  $internal: set($internal, $function, $names...) !global;
}


// Register Function
// -----------------
/// Register functions with accoutrement.
///
/// @group core-register
///
/// @param {function} $function -
///   The first-class function to be registered
/// @param {strings} $names... [$function] -
///   One or more alias names (strings)
///   to use for map-access to the function
/// @output {map} $_ACCOUTREMENT_APP -
///   Functions are registered in a map
///   under any number of aliases
@mixin register(
  $function,
  $names...
) {
  $functions: set($functions, $function, $names...) !global;
}
