@use '../function';
@use 'sass:math';
@use 'sass:meta';

/// # Math Functions
/// Use these internal math functions
/// to adjust related numbers in your maps.
/// The functions are not available directly,
/// but each can be accessed in accoutrement maps
/// using a number of un-prefixed alias names.
/// All the functions from `sass:math` are also available.
/// @group token-math

// Plus
// ----
/// Add two values together in accoutrement maps.
///
/// Direct access to this function is prefixed,
/// but it is available in all accoutrement maps as
/// `'plus'`, `'add'`, or `'+'`.
///
/// @access public
/// @name plus
/// @group token-math
/// @example scss
///   $sizes: (
///     'text': 16px,
///     'margin': 14px,
///     'spacer': '#text' ('plus': '#margin'),
///   );
///
/// @param {string | length} $num1 -
///   The name or length of the size you are adding to
/// @param {string | length} $num2 -
///   The name or length of the size being added
/// @return {number} -
///   The calculated results of adding
///   `$num1` and `$num2`
@function plus(
  $num1,
  $num2
) {
  @return $num1 + $num2;
}
@include function.internal(meta.get-function('plus'), 'plus', 'add', '+');


// Minus
// -----
/// Subtract one value from another in accoutrement maps.
///
/// Direct access to this function is prefixed,
/// but it is available in all accoutrement maps as
/// `'minus'`, `'subtract'`, or `'-'`.
///
/// @access public
/// @name minus
/// @group token-math
/// @example scss
///   $sizes: (
///     'text': 16px,
///     'margin': 14px,
///     'shim': '#text' ('minus': '#margin'),
///   );
///
/// @param {string | length} $num1 -
///   The name or length of the size you are subtracting from
/// @param {string | length} $num2 -
///   The name or length of the size to subtract
/// @return {number} -
///   The calculated results of subtracting
///   `$num2` from `$num1`
@function minus(
  $num1,
  $num2
) {
  @return $num1 - $num2;
}
@include function.internal(meta.get-function('minus'), 'minus', 'subtract', '-');


// Times
// -----
/// Multiplty two values in accoutrement maps.
///
/// Direct access to this function is prefixed,
/// but it is available in all accoutrement maps as
/// `'times'`, `'multiply'`, or `'*'`.
///
/// @access public
/// @name times
/// @group token-math
/// @example scss
///   $sizes: (
///     'text': 16px,
///     'double': '#text' ('times': 2),
///   );
///
/// @param {string | length} $num1 -
///   The name or length of the size you are multiplying
/// @param {string | length} $num2 -
///   The name or length of the size to use as a multiple
/// @return {number} -
///   The calculated results of multiplying
///   `$num1` by `$num2`
@function times(
  $num1,
  $num2
) {
  @return $num1 * $num2;
}
@include function.internal(meta.get-function('times'), 'times', 'multiply', '*');


// Divide
// ------
/// Divide two values in accoutrement maps.
///
/// Direct access to this function is prefixed,
/// but it is available in all accoutrement maps as
/// `'divide'`, or `'/'`.
///
/// @access public
/// @name divide
/// @group token-math
/// @example scss
///   $sizes: (
///     'text': 16px,
///     'half': '#text' ('divide': 2),
///   );
///
/// @param {string | length} $num1 -
///   The name or length of the size you are dividing
/// @param {string | length} $num2 -
///   The name or length of the size to use as a division
/// @return {number} -
///   The calculated results of dividing
///   `$num1` by `$num2`
@function divide(
  $num1,
  $num2
) {
  @return math.div($num1, $num2);
}
@include function.internal(meta.get-function('divide'), 'divide', '/');


// Modulo
// ------
/// Divide two values in accoutrement maps,
/// and return the remainder.
///
/// Direct access to this function is prefixed,
/// but it is available in all accoutrement maps as
/// `'modulo'`, `'remainder'`, `'mod'`, or `'%'`.
///
/// @access public
/// @name modulo
/// @group token-math
/// @example scss
///   $sizes: (
///     'text': 16px,
///     'half': '#text' ('modulo': 2),
///   );
///
/// @param {string | length} $num1 -
///   The name or length of the size you are dividing
/// @param {string | length} $num2 -
///   The name or length of the size to use as a division
/// @return {number} -
///   The calculated results of dividing
///   `$num1` by `$num2`
@function modulo(
  $num1,
  $num2
) {
  @return $num1 % $num2;
}
@include function.internal(meta.get-function('modulo'), 'modulo', 'remainder', 'mod', '%');
